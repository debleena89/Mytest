file autoPC.cpp: Parsing
Converting
Type-checking autoPC
Generating GOTO Program
Adding CPROVER library
Function Pointer Removal
Partial Inlining
Generic Property Instrumentation
Starting Bounded Model Checking
Unwinding loop c::main.0 iteration 1 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 2 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 3 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 4 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 5 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 6 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 7 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 8 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 9 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 10 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 11 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 12 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 13 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 14 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 15 file autoPC.cpp line 70 function main thread 0
Unwinding loop c::main.0 iteration 16 file autoPC.cpp line 70 function main thread 0
size of program expression: 591 steps
simple slicing removed 3 assignments
Generated 143 VCC(s), 53 remaining after simplification
Passing problem to propositional reduction
Running propositional reduction
Solving with MiniSAT 2.2.0 without simplifier
5309 variables, 11754 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5349 variables, 10349 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5389 variables, 10448 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5429 variables, 10547 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5469 variables, 9342 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5509 variables, 9441 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5549 variables, 9540 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5589 variables, 9639 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Solving with MiniSAT 2.2.0 without simplifier
5629 variables, 9738 clauses
SAT checker: negated claim is UNSATISFIABLE, i.e., holds
Runtime decision procedure: 0.05s

** Results:
[get_dmr_status.1] array `survstatbuf' lower bound: OK
[get_dmr_status.2] array `survstatbuf' upper bound: FAILED
[get_dmr_status.3] array `survstatbuf2' lower bound: OK
[get_dmr_status.4] array `survstatbuf2' upper bound: FAILED
[get_dmr_status.5] array `survstatbuf' lower bound: OK
[get_dmr_status.6] array `survstatbuf' upper bound: FAILED
[get_dmr_status.7] array `survstatbuf2' lower bound: OK
[get_dmr_status.8] array `survstatbuf2' upper bound: FAILED
[main.1] array `survstatbuf' lower bound: OK
[main.2] array `survstatbuf' upper bound: OK
[main.3] array `survstatbuf2' lower bound: OK
[main.4] array `survstatbuf2' upper bound: OK
[main.5] array `survstatbuf' lower bound: OK
[main.6] array `survstatbuf' upper bound: FAILED
[main.7] array `survstatbuf2' lower bound: OK
[main.8] array `survstatbuf2' upper bound: FAILED
[main.9] array `OK' lower bound: OK
[main.10] array `survstatbuf' lower bound: OK
[main.11] array `survstatbuf' upper bound: FAILED
[main.12] array `survstatbuf2' lower bound: OK
[main.13] array `survstatbuf2' upper bound: FAILED
[main.14] array `OK' lower bound: OK
[main.15] array `survstatbuf' lower bound: OK
[main.16] array `survstatbuf' upper bound: FAILED
[main.17] array `OK' lower bound: OK
[main.18] array `survstatbuf' lower bound: OK
[main.19] array `survstatbuf' upper bound: FAILED
[main.20] array `OK' lower bound: OK
[main.21] array `survstatbuf2' lower bound: OK
[main.22] array `survstatbuf2' upper bound: FAILED
[main.23] array `OK' lower bound: OK
[main.24] array `survstatbuf2' lower bound: OK
[main.25] array `survstatbuf2' upper bound: FAILED
[main.26] array `OK' lower bound: OK
[main.27] array `survstatbuf' lower bound: OK
[main.28] array `survstatbuf' upper bound: FAILED
[main.29] array `survstatbuf2' lower bound: OK
[main.30] array `survstatbuf2' upper bound: FAILED
[main.31] array `NOK' lower bound: OK
[main.32] array `survstatbuf' lower bound: OK
[main.33] array `survstatbuf' upper bound: FAILED
[main.34] array `survstatbuf2' lower bound: OK
[main.35] array `survstatbuf2' upper bound: FAILED
[main.36] array `NOK' lower bound: OK
[main.37] array `survstatbuf' lower bound: OK
[main.38] array `survstatbuf' upper bound: FAILED
[main.39] array `NOK' lower bound: OK
[main.40] array `survstatbuf' lower bound: OK
[main.41] array `survstatbuf' upper bound: FAILED
[main.42] array `NOK' lower bound: OK
[main.43] array `survstatbuf2' lower bound: OK
[main.44] array `survstatbuf2' upper bound: FAILED
[main.45] array `NOK' lower bound: OK
[main.46] array `survstatbuf2' lower bound: OK
[main.47] array `survstatbuf2' upper bound: FAILED
[main.48] array `NOK' lower bound: OK
[main.49] array `NOK' lower bound: OK
[main.50] array `OK' lower bound: OK
[main.51] Hey OK0 fails: OK
[main.52] array `OK' lower bound: OK
[main.53] Hey OK1 fails: OK
[main.54] array `OK' lower bound: OK
[main.55] Hey OK2 fails: OK
[main.56] array `OK' lower bound: OK
[main.57] Hey OK3 fails: OK
[main.58] array `OK' lower bound: OK
[main.59] Hey OK4 fails: OK
[main.60] array `OK' lower bound: OK
[main.61] Hey OK5 fails: OK
[main.62] array `NOK' lower bound: OK
[main.63] Hey NOK0 fails: OK
[main.64] array `NOK' lower bound: OK
[main.65] Hey NOK1 fails: OK
[main.66] array `NOK' lower bound: OK
[main.67] Hey NOK2 fails: OK
[main.68] array `NOK' lower bound: OK
[main.69] Hey NOK3 fails: OK
[main.70] array `NOK' lower bound: OK
[main.71] Hey NOK4 fails: OK
[main.72] array `NOK' lower bound: OK
[main.73] Hey NOK5 fails: OK
[main.74] array `NOK' lower bound: OK
[main.75] Hey NOK6 fails: OK

** 20 of 83 failed (9 iterations)
